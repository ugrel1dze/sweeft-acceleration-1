func minSplit(amount: Int) -> Int {
    guard amount > 0 else { return 0 }
    var remainingAmount = amount
    var count = 0
    let denominations = [50, 20, 10, 5, 1]
    for denomination in denominations {
        let times = remainingAmount / denomination
        count += times
        remainingAmount -= times * denomination
    }
    return count
}

func sumOfDigits(start: Int, end: Int) -> Int {
    let mn = min(start, end)
    let mx = max(start, end)
    guard mn != mx else {
        return 2*mn
    }
    var sum = 0
    for number in mn...mx {
        var currentNumber = abs(number)
        while currentNumber > 0 {
            sum += currentNumber % 10
            currentNumber /= 10
        }
    }
    return sum
}

func isProperly(sequence: String) -> Bool {
    var stack: [Character] = []
    for char in sequence {
        switch char {
        case "(":
            stack.append(char)
        case ")":
            guard !stack.isEmpty else { return false }
            stack.popLast()
        default:
            return false
        }
    }
    return stack.isEmpty
}

func countWays(n: Int, steps: [Int]) -> Int {
    guard n > 1 else {
        guard n == 1 else { return 0 }
        return 1 + steps[0]
    }
    var dp = [Int](repeating: 0, count: n + 1)
    dp[0] = steps[0]
    dp[1] = steps[0] == 1 ? 2 : steps[1]
    for i in 2...n {
        guard dp[i-1] != 0 || dp[i - 2] != 0 else { continue }
        if i < n, steps[i] == 0 {
            continue
        }
        dp[i] = dp[i - 1] + dp[i - 2]
    }
    return dp[n]
}

func zeros(N: Int) -> Int {
    guard N >= 0 else { return 0 }
    var count = 0
    var divisor = 5
    while N / divisor > 0 {
        count += N / divisor
        divisor *= 5
    }
    return count
}
